buildscript {
    repositories {
    	mavenCentral()
    }
    dependencies {
		classpath 'org.openjfx:javafx-plugin:0.0.8'
    }
}

plugins {
	id 'application' // uses also plugin 'java'
    id 'eclipse'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'org.beryx.jlink' version '2.17.0'
}

group 'fr.omathe'
project.version '1.3.2'

def jdk = System.getProperty('java.home')
def moduleName = 'fr.omathe.restui'
def mainClass = moduleName + '.gui.RestUiApp'
mainClassName = mainClass

compileJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
	jcenter()
}

task copyLibs(type: Copy) {

	into "lib"
	from configurations.runtime
}

javafx {
	version = '13'
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.web' ]
}

jar {
	//inputs.property("moduleName", moduleName)
    manifest {
        attributes(
                'Main-Class': mainClass,
                'RestUI-Version': project.version,
                'RestUI-Date': new Date().getTime()
        )
    }
}

dependencies {
    compile 'com.sun.jersey:jersey-client:1.9.1'
    compile 'org.jdom:jdom:2.0.2'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.3'
}

task copyToLib(type: Copy) {

	doFirst {
		println 'copy to libs'
    	into "$buildDir/libs"
    	from "/media/DATA/dev/workspaceJ9/RestUI/sav_libs"
	}
}
jar.dependsOn(copyToLib)

//create a single Jar with all dependencies
task fatJar(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'RestUI',
        	'Implementation-Version': version,
        	'Main-class': mainClass,
        	'RestUI-Version': project.version,
            'RestUI-Date': new Date().getTime()
    }
    baseName = project.name + '-all'
    from {
    	configurations.compile.collect {
    		it.isDirectory() ? it : zipTree(it)
    	}
    }
    with jar
}

eclipse {
	classpath {
		downloadSources=true
		containers 'org.eclipse.jdt.launching.JRE_CONTAINER'
		file {
			whenMerged {
				entries.removeAll { it.kind == 'con' && it.path == 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-13/' }
				entries.findAll { it.properties.kind.equals('lib') }.each {
                    it.entryAttributes['module'] = 'true'
                }
			}
		}
	}
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    
    mergedModule {
    	requires 'java.xml';
	}
    
    launcher {
        name = 'RestUI'
    }
}


// creates application bundle (executable + runtime)
task javaPackager(type: Exec, dependsOn: assemble) {

    workingDir project.projectDir
    commandLine = [
            'javapackager',
            '-deploy',
            '-nosign',
            '-native', 'image',
            '-outdir', "${buildDir}/distribution",
            '-outfile', project.name,
            '-name', project.name,
            '-appclass', mainClass,
            '-p', "${jdk}/jmods${File.pathSeparator}${buildDir}/libs",
            '--add-modules', moduleName,
            '-m', "$moduleName/$mainClass"
    ]
    //System.out.println("commandLine : " + commandLine)
}

// removes bloated runtime created by javapackager
task cleanPackagerRuntime(dependsOn: javaPackager) {
    doLast() {
        File runtimeFile = new File("${buildDir}/distribution/${project.name}/runtime")
        runtimeFile.deleteDir()
        System.out.println("deleting bloated runtime in " + runtimeFile)
    }
}

// creates a replacement runtime via jlink command (much smaller than jpackager)
task createFinalAppBundle(type: Exec, dependsOn: [cleanPackagerRuntime]) {

    workingDir project.projectDir
    commandLine = [
            'jlink',
            '-p', "${jdk}/jmods${File.pathSeparator}${buildDir}/libs",
            '--add-modules', moduleName,
            '--strip-debug',
            '--no-header-files',
            '--no-man-pages',
            '--strip-native-commands',
            "--vm=server",
            "--compress=2",
            '--output', "${buildDir}/distribution/${project.name}/runtime"
    ]

    doLast{
        System.out.println("Application '${project.name}' packaged.")
        System.out.println(" -> location: ${buildDir}/distribution/${project.name}/")
    }
}

task disp {
	Integer i = 20;
	Integer j = i++;
	doLast{
		println "jdk: ${jdk}"
		println "buildDir: ${buildDir}"
		println "project.name: ${project.name}"
		println "project.projectDir: ${project.projectDir}"
		println "moduleName: ${moduleName}"
		println "mainClass: ${mainClass}"
		println "mainClassName: ${mainClassName}"
		println "File.pathSeparator: ${File.pathSeparator}"
		println "i: " + i
		println "j: " + j
	}
}