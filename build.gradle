apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'java-library'
// apply plugin: 'application'

group 'fr.omathe'
project.version '1.3.1'

//def jdk = System.getProperty("java.home")
def jdk = 'C:/oma/soft/java/jdk1.8.0_91'
def moduleName = 'restui.gui'
def mainClass = 'restui.gui.RestUiApp'

buildscript {
    repositories {
    	mavenCentral()
    	maven {
      		url "https://plugins.gradle.org/m2/"
    	}
    }
    dependencies {
//        classpath 'no.tornado:fxlauncher-gradle-plugin:1.0.15'
//       classpath "com.gradle:build-scan-plugin:1.8"
//        classpath 'com.google.gradle:osdetector-gradle-plugin:1.6.0'
    }
}

//sourceCompatibility = 1.8
//targetCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
	jcenter()
}

task copyLibs(type: Copy) {

	into "lib"
	from configurations.runtime
}

/* useful for java9
compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
            '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}
*/
//compileJava.dependsOn updateSource

/*compileTestJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
            '--module-path', classpath.asPath,
            '--add-modules', 'org.junit.jupiter.api',
            '--add-reads', "$moduleName=org.junit.jupiter.api",
            '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
        ]
        classpath = files()
    }
}*/

jar {
	//inputs.property("moduleName", moduleName)
    manifest {
        attributes(
                'Main-Class': mainClass,
                'RestUI-Version': project.version,
                'RestUI-Date': new Date().getTime()
        )
    }
}

dependencies {
    
    //compile group: 'org.openjfx', name: 'javafx-base', version: '13.0.1', classifier: 'win'
    //compile group: 'org.openjfx', name: 'javafx-graphics', version: '13.0.1', classifier: 'win'
    //compile group: 'org.openjfx', name: 'javafx-controls', version: '13.0.1', classifier: 'win'
    //compile group: 'org.openjfx', name: 'javafx-fxml', version: '13.0.1', classifier: 'win'
    //compile group: 'org.openjfx', name: 'javafx-web', version: '13.0.1', classifier: 'win'
    
    compile 'com.sun.jersey:jersey-client:1.9.1'
    compile 'org.jdom:jdom:2.0.2'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.3'
    testCompile 'junit:junit:4.12'
}

task copyToLib(type: Copy) {

	doFirst {
		println 'copy to libs'
    	into "$buildDir/libs"
    	from "/media/DATA/dev/workspaceJ9/RestUI/sav_libs"
	}
//    from configurations.compile
}
jar.dependsOn(copyToLib)

/*buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}*/

//create a single Jar with all dependencies
task fatJar(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'RestUI',
        	'Implementation-Version': version,
        	'Main-class': 'restui.gui.RestUiApp',
        	'RestUI-Version': project.version,
            'RestUI-Date': new Date().getTime()
    }
    baseName = project.name + '-all'
    from {
    	configurations.compile.collect {
    		it.isDirectory() ? it : zipTree(it)
    	}
    }
    with jar
}

/*eclipse {
	classpath {
		downloadSources=true
		
		// move libraries to modulepath
		file {
            whenMerged {
                entries.findAll { it.kind == 'lib' }.each { it.entryAttributes['module'] = 'true' }
            }
        }
	}
}*/

/*eclipse {
	classpath {
		downloadSources=true
		containers 'org.eclipse.jdt.launching.JRE_CONTAINER'
		file {
			whenMerged {
				entries.removeAll { it.kind == 'con' && it.path == 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-10/' }
				entries.findAll { it.kind == 'lib' }.each { it.entryAttributes['module'] = 'true' }
			}
		}
	}
}*/


// creates application bundle (executable + runtime)
task javaPackager(type: Exec, dependsOn: assemble) {

    workingDir project.projectDir
    commandLine = [
            'javapackager',
            '-deploy',
            '-nosign',
            '-native', 'image',
            '-outdir', "${buildDir}/distribution",
            '-outfile', project.name,
            '-name', project.name,
            '-appclass', mainClass,
            '-p', "${jdk}/jmods${File.pathSeparator}${buildDir}/libs",
            '--add-modules', moduleName,
            '-m', "$moduleName/$mainClass"
    ]
    //System.out.println("commandLine : " + commandLine)
}

// removes bloated runtime created by javapackager
task cleanPackagerRuntime(dependsOn: javaPackager) {
    doLast() {
        File runtimeFile = new File("${buildDir}/distribution/${project.name}/runtime")
        runtimeFile.deleteDir()
        System.out.println("deleting bloated runtime in " + runtimeFile)
    }
}

// creates a replacement runtime via jlink command (much smaller than jpackager)
task createFinalAppBundle(type: Exec, dependsOn: [cleanPackagerRuntime]) {

    workingDir project.projectDir
    commandLine = [
            'jlink',
            '-p', "${jdk}/jmods${File.pathSeparator}${buildDir}/libs",
            '--add-modules', moduleName,
            '--strip-debug',
            '--no-header-files',
            '--no-man-pages',
            '--strip-native-commands',
            "--vm=server",
            "--compress=2",
            '--output', "${buildDir}/distribution/${project.name}/runtime"
    ]

    doLast{
        System.out.println("Application '${project.name}' packaged.")
        System.out.println(" -> location: ${buildDir}/distribution/${project.name}/")
    }
}

/*task wrapper(type: Wrapper) {
	gradleVersion = '5.0'
}*/

task disp {
	Integer i = 20;
	Integer j = i++;
	doLast{
		println "jdk: ${jdk}"
		println "buildDir: ${buildDir}"
		println "project.name: ${project.name}"
		println "project.projectDir: ${project.projectDir}"
		println "moduleName: ${moduleName}"
		println "File.pathSeparator: ${File.pathSeparator}"
		println "i: " + i
		println "j: " + j
	}
}