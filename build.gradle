group 'fr.omathe'
version '1.0'

<<<<<<< HEAD
def jdk = System.getProperty("java.home")
//def jdk = '/opt/java/jdk-11.0.1'
def moduleName = 'restui.gui'
def mainClass = 'restui.gui.RestUiApp'
=======
apply plugin: 'com.gradle.build-scan'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'no.tornado.fxlauncher'
apply plugin: 'com.google.osdetector'

ext.platform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os

mainClassName = "restui.gui.RestUiApp"
>>>>>>> branch 'master' of https://github.com/omathe/RestUI.git

buildscript {
    repositories {
    	mavenCentral()
    	maven {
      		url "https://plugins.gradle.org/m2/"
    	}
    	
    }
    dependencies {
        classpath 'no.tornado:fxlauncher-gradle-plugin:1.0.15'
        classpath "com.gradle:build-scan-plugin:1.8"
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.6.0'
    }
}

sourceCompatibility = 1.10
targetCompatibility = 1.10

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

task copyLibs(type: Copy) {

	into "lib"
	from configurations.runtime
}

jar {
	//include 'fxml/*.xml'
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart',
                   'Implementation-Version': version,
					'Main-class': 'restui.gui.RestUiApp',
					'Class-Path': '. jdom-2.0.2.jar'
    }
}

dependencies {
    
<<<<<<< HEAD
    compile 'com.sun.jersey:jersey-client:1.9.1'
    compile 'org.jdom:jdom:2.0.2'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.3'
    testCompile 'junit:junit:4.+'
=======
    /* for Java 11
    compile "org.openjfx:javafx-base:11:$platform"
    compile "org.openjfx:javafx-graphics:11:$platform"
    compile "org.openjfx:javafx-controls:11:$platform"
    compile "org.openjfx:javafx-fxml:11:$platform"
    compile "org.openjfx:javafx-web:11:$platform"
    */

    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.3'
    compile group: 'com.sun.jersey', name: 'jersey-client', version: '1.9.1'
    compile group: 'org.jdom', name: 'jdom', version: '2.0.2'
    testCompile group: 'junit', name: 'junit', version: '4.+'
>>>>>>> branch 'master' of https://github.com/omathe/RestUI.git
}

fxlauncher {
    applicationVendor 'RestUI'
    applicationUrl 'http://omathe.free.fr/restui/'
    applicationMainClass 'restui.gui.RestUiApp'
    acceptDowngrade false
    deployTarget 'w48839@fxldemo.tornado.no:fxldemo'
}

task copyToLib(type: Copy) {
    into "$buildDir/libs"
    from configurations.runtime
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'RestUI',
        	'Implementation-Version': version,
        	'Main-class': 'restui.gui.RestUiApp'
    }
    baseName = project.name + '-all'
    from {
    	configurations.compile.collect {
    		it.isDirectory() ? it : zipTree(it)
    	}
    }
    with jar
}

eclipse {
<<<<<<< HEAD
	classpath {
		downloadSources=true
		
		// move libraries to modulepath
		file {
            whenMerged {
                entries.findAll { it.kind == 'lib' }.each { it.entryAttributes['module'] = 'true' }
            }
        }
=======
    	classpath {
       		downloadSources=true
    	}
>>>>>>> branch 'master' of https://github.com/omathe/RestUI.git
	}
<<<<<<< HEAD
}

// creates application bundle (executable + runtime)
task javaPackager(type: Exec, dependsOn: assemble) {

    workingDir project.projectDir
    commandLine = [
            'javapackager',
            '-deploy',
            '-nosign',
            '-native', 'image',
            '-outdir', "${buildDir}/distribution",
            '-outfile', project.name,
            '-name', project.name,
            '-appclass', mainClass,
            '-p', "${jdk}/jmods${File.pathSeparator}${buildDir}/libs",
            '--add-modules', moduleName,
            '-m', "$moduleName/$mainClass"
    ]
    System.out.println("commandLine : " + commandLine)
}

// removes bloated runtime created by javapackager
task cleanPackagerRuntime(dependsOn: javaPackager) {
    doLast() {
        File runtimeFile = new File("${buildDir}/distribution/${project.name}/runtime")
        runtimeFile.deleteDir()
        System.out.println("deleting bloated runtime in " + runtimeFile)
    }
}

// creates a replacement runtime via jlink command (much smaller than jpackager)
task createFinalAppBundle(type: Exec, dependsOn: [cleanPackagerRuntime]) {

    workingDir project.projectDir
    commandLine = [
            'jlink',
            '-p', "${jdk}/jmods${File.pathSeparator}${buildDir}/libs",
            '--add-modules', moduleName,
            '--strip-debug',
            '--no-header-files',
            '--no-man-pages',
            '--strip-native-commands',
            "--vm=server",
            "--compress=2",
            '--output', "${buildDir}/distribution/${project.name}/runtime"
    ]

    doLast{
        System.out.println("Application '${project.name}' packaged.")
        System.out.println(" -> location: ${buildDir}/distribution/${project.name}/")
    }
}
=======
>>>>>>> branch 'master' of https://github.com/omathe/RestUI.git

task wrapper(type: Wrapper) {
	gradleVersion = '4.8'
}

<<<<<<< HEAD
task disp {
	Integer i = 20;
	Integer j = i++;
	doLast{
		println "jdk: ${jdk}"
		println "buildDir: ${buildDir}"
		println "project.name: ${project.name}"
		println "project.projectDir: ${project.projectDir}"
		println "moduleName: ${moduleName}"
		println "File.pathSeparator: ${File.pathSeparator}"
		println "i: " + i
		println "j: " + j
	}
}
=======

>>>>>>> branch 'master' of https://github.com/omathe/RestUI.git
